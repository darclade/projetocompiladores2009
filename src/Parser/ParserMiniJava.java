/* Generated By:JavaCC: Do not edit this line. ParserMiniJava.java */
package Parser;

import syntaxtree.*;
import visitor.*;

public class ParserMiniJava implements ParserMiniJavaConstants {

  static final public Program Start() throws ParseException {
   MainClass m1; ClassDeclList c1 = new ClassDeclList(); ClassDecl c;
    m1 = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(3)) {
        c = ClassDecl();
                                         c1.addElement(c);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          c = Class();
                    c1.addElement(c);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
            {if (true) return new Program(m1,c1);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
  Identifier i1,i2; Statement s1;
    jj_consume_token(CLASS);
    i1 = Id();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    i2 = Id();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s1 = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
    {if (true) return new MainClass(i1,i2,s1);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclSimple Class() throws ParseException {
  VarDeclList v1 = new VarDeclList();
  MethodDeclList m1 = new MethodDeclList();
  VarDecl v; MethodDecl m; Identifier i1;
    jj_consume_token(CLASS);
    i1 = Id();
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case INT:
      case INT_VETOR:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case INT_VETOR:
      case BOOLEAN:
      case ID:
        v = VarDecl();
                    v1.addElement(v);
        break;
      case PUBLIC:
        m = MethodDecl();
                       m1.addElement(m);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclSimple(i1,v1,m1);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
  VarDeclList v1 = new VarDeclList();
  MethodDeclList m1 = new MethodDeclList();
  VarDecl v; MethodDecl m; Identifier i1,i2;
    jj_consume_token(CLASS);
    i1 = Id();
    jj_consume_token(EXTENDS);
    i2 = Id();
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case INT:
      case INT_VETOR:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case INT_VETOR:
      case BOOLEAN:
      case ID:
        v = VarDecl();
                    v1.addElement(v);
        break;
      case PUBLIC:
        m = MethodDecl();
                       m1.addElement(m);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
    {if (true) return new ClassDeclExtends(i1,i2,v1,m1);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
  Type t1; Identifier i1;
    t1 = Type();
    i1 = Id();
    jj_consume_token(PONTOVIRGULA);
    {if (true) return new VarDecl(t1,i1);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Id() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
             {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
  Type t1; Identifier i1; Exp e1;
  FormalList f1 = new FormalList();
  VarDeclList v1 = new VarDeclList() ; VarDecl v;
  StatementList s1 = new StatementList(); Statement s;
    jj_consume_token(PUBLIC);
    t1 = Type();
    i1 = Id();
    jj_consume_token(LPAREN);
    f1 = FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case INT_VETOR:
      case BOOLEAN:
      case IF:
      case WHILE:
      case PRINT_LINE:
      case LBRACE:
      case ID:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      if (jj_2_2(2)) {
        v = VarDecl();
                                 v1.addElement(v);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case PRINT_LINE:
        case LBRACE:
        case ID:
          s = Statement();
                      s1.addElement(s);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RETURN);
    e1 = Exp();
    jj_consume_token(PONTOVIRGULA);
    jj_consume_token(RBRACE);
    {if (true) return new MethodDecl(t1,i1,f1,v1,s1,e1);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
  FormalList f1 = new FormalList();
  Formal f2,f3; Identifier i1,i2; Type t1,t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case INT_VETOR:
    case BOOLEAN:
    case ID:
      t1 = Type();
      i1 = Id();
    f2 = new Formal(t1,i1); f1.addElement(f2);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRGULA);
        t2 = Type();
        i2 = Id();
    f3 = new Formal(t2,i2); f1.addElement(f3);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
   {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
              {if (true) return new BooleanType();}
      break;
    case ID:
      t = jj_consume_token(ID);
               {if (true) return new IdentifierType(t.image);}
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(INT_VETOR);
                               {if (true) return new IntArrayType();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
             {if (true) return new IntegerType();}
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
  Statement s; StatementList s1 = new StatementList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case PRINT_LINE:
        case LBRACE:
        case ID:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        s = Statement();
                               s1.addElement(s);
      }
      jj_consume_token(RBRACE);
                                                                {if (true) return new Block(s1);}
      break;
    case ID:
      if (jj_2_4(2)) {
        s = ArrayAssignment();
                                         {if (true) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          s = UnaryAssignment();
                                           {if (true) return s;}
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IF:
      s = If();
              {if (true) return s;}
      break;
    case WHILE:
      s = While();
                 {if (true) return s;}
      break;
    case PRINT_LINE:
      s = Print();
                 {if (true) return s;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement UnaryAssignment() throws ParseException {
  Identifier i1; Exp e1;
    i1 = Id();
    jj_consume_token(RECEBE);
    e1 = Exp();
    jj_consume_token(PONTOVIRGULA);
    {if (true) return new Assign(i1,e1);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement ArrayAssignment() throws ParseException {
  Exp e1,e2; Identifier i1;
    i1 = Id();
    jj_consume_token(LBRACKET);
    e1 = Exp();
    jj_consume_token(RBRACKET);
    jj_consume_token(RECEBE);
    e2 = Exp();
    jj_consume_token(PONTOVIRGULA);
    {if (true) return new ArrayAssign(i1,e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement If() throws ParseException {
  Exp e1; Statement s1,s2;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    e1 = Exp();
    jj_consume_token(RPAREN);
    s1 = Statement();
    jj_consume_token(ELSE);
    s2 = Statement();
    {if (true) return new If(e1,s1,s2);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Print() throws ParseException {
  Exp e1;
    jj_consume_token(PRINT_LINE);
    jj_consume_token(LPAREN);
    e1 = Exp();
    jj_consume_token(RPAREN);
    jj_consume_token(PONTOVIRGULA);
    {if (true) return new Print(e1);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement While() throws ParseException {
  Exp e1; Statement s1;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e1 = Exp();
    jj_consume_token(RPAREN);
    s1 = Statement();
    {if (true) return new While(e1,s1);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
  Exp e;
    if (jj_2_5(2147483647)) {
      e = AndExp();
    } else if (jj_2_6(2147483647)) {
      e = LessThanExp();
    } else if (jj_2_7(2147483647)) {
      e = PlusExp();
    } else if (jj_2_8(2147483647)) {
      e = MinusExp();
    } else if (jj_2_9(2147483647)) {
      e = TimesExp();
    } else if (jj_2_10(2147483647)) {
      e = ArrayLookup();
    } else if (jj_2_11(2147483647)) {
      e = ArrayLength();
    } else if (jj_2_12(2147483647)) {
      e = CallExp();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGADO:
      case INTEGER_LITERAL:
      case TRUE:
      case FALSE:
      case NEW:
      case THIS:
      case LPAREN:
      case ID:
        e = PrimaryExp();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndExp() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(E);
    e2 = PrimaryExp();
    {if (true) return new And(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp LessThanExp() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(MENOR);
    e2 = PrimaryExp();
    {if (true) return new LessThan(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PlusExp() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(MAIS);
    e2 = PrimaryExp();
    {if (true) return new Plus(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MinusExp() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(MENOS);
    e2 = PrimaryExp();
    {if (true) return new Minus(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp TimesExp() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(ESTRELA);
    e2 = PrimaryExp();
    {if (true) return new Times(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayLookup() throws ParseException {
  Exp e1,e2;
    e1 = PrimaryExp();
    jj_consume_token(LBRACKET);
    e2 = PrimaryExp();
    jj_consume_token(RBRACKET);
    {if (true) return new ArrayLookup(e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayLength() throws ParseException {
  Exp e1;
    e1 = PrimaryExp();
    jj_consume_token(PONTO);
    jj_consume_token(LENGTH);
    {if (true) return new ArrayLength(e1);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp CallExp() throws ParseException {
  Exp e; Identifier i1; ExpList e1 = new ExpList();
    e = PrimaryExp();
    jj_consume_token(PONTO);
    i1 = Id();
    jj_consume_token(LPAREN);
    e1 = ExpList();
    jj_consume_token(RPAREN);
    {if (true) return new Call(e,i1,e1);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
 ExpList e1 = new ExpList(); Exp e2,e3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGADO:
    case INTEGER_LITERAL:
    case TRUE:
    case FALSE:
    case NEW:
    case THIS:
    case LPAREN:
    case ID:
      e2 = Exp();
                 e1.addElement(e2);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(VIRGULA);
        e3 = Exp();
                          e1.addElement(e3);
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PrimaryExp() throws ParseException {
  Token t; Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                          {if (true) return new IntegerLiteral(Integer.parseInt(t.image));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
               {if (true) return new True();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
               {if (true) return new False();}
      break;
    case ID:
      t = jj_consume_token(ID);
               {if (true) return new IdentifierExp(t.image);}
      break;
    case THIS:
      jj_consume_token(THIS);
               {if (true) return new This();}
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_13(3)) {
        e = ArrayAllocationExp();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e = AllocationExp();
          break;
        case NEGADO:
          e = NotExp();
          break;
        case LPAREN:
          e = ParenExp();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ArrayAllocationExp() throws ParseException {
  Exp e;
    jj_consume_token(NEW);
    jj_consume_token(INT);
    jj_consume_token(LBRACKET);
    e = Exp();
    jj_consume_token(RBRACKET);
    {if (true) return new NewArray(e);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AllocationExp() throws ParseException {
  Identifier i1;
    jj_consume_token(NEW);
    i1 = Id();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new NewObject(i1);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp NotExp() throws ParseException {
  Exp e1;
    jj_consume_token(NEGADO);
    e1 = Exp();
                        {if (true) return new Not(e1);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ParenExp() throws ParseException {
  Exp e1;
    jj_consume_token(LPAREN);
    e1 = Exp();
    jj_consume_token(RPAREN);
                               {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_3_13() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(VIRGULA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(PONTO)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(INT_VETOR)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_11()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(ESTRELA)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MAIS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MENOR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(PONTO)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(PONTO)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(ESTRELA)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(E)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MAIS)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(MENOR)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(E)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(NEGADO)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserMiniJavaTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x10,0x7020,0x7020,0x7020,0x7020,0x6f000,0x68000,0x0,0x7000,0x4000,0x1000,0x68000,0x0,0x68000,0x80800000,0x0,0x80800000,0x80000000,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x2040,0x2040,0x800,0x2000,0x2000,0x0,0x2040,0x2000,0x2040,0x201f,0x800,0x201f,0x200b,0x14,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[13];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserMiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserMiniJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserMiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserMiniJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserMiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserMiniJava(ParserMiniJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserMiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                            }
