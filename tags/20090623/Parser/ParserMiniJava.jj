/**
*
* Analisador Lexico e Sintatico para Linguagem MiniJava
*
*/
options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(ParserMiniJava)
package Parser;

public class ParserMiniJava{}
PARSER_END(ParserMiniJava)

/* Tokens */
TOKEN: {

 <#LETRA: ["_","a"-"z","A"-"Z"]>
	| <#DIGITO: ["0"-"9"]>

 	| <MAINCLASS: "MainClass"> 
 	| <CLASS: "class">
 	| <PUBLIC: "public">
 	| <STATIC: "static">
 	| <VOID: "void">
 	| <MAIN: "main">
 	| <EXTENDS: "extends">
	| <RETURN: "return">

	| <STRING: "String">
	| <INT: "int">
	| <INT_VETOR: <INT><LBRACKET><RBRACKET>>
	| <BOOLEAN: "boolean">

	| <IF: "if">
	| <ELSE: "else">
	| <WHILE: "while">
	| <PRINT_LINE: "System.out.println">
	| <LENGTH: "length">

	| <RECEBE: "=">
	| <MENOR: "<">
	| <MAIOR: ">">
	| <NEGADO: "!">
	| <IGUAL: "==">
	| <E: "&&">
	| <OU: "||">
	| <MAIS: "+">
	| <MENOS: "-">
	| <ESTRELA: "*">
	| <BARRA: "/">

	| <INTEGER_LITERAL: <DIGITO> (<DIGITO>)*>
	| <TRUE: "true">
    | <FALSE: "false">
    
	| <NEW: "new">
	| <THIS: "this">
 	
	| <LPAREN: "(">
	| <RPAREN: ")">
	| <LBRACE: "{">
	| <RBRACE: "}">
	| <LBRACKET: "[">
	| <RBRACKET: "]">
	| <PONTOVIRGULA: ";">
	| <VIRGULA: ",">
	| <PONTO: ".">
	
	| <ID: <LETRA> (<LETRA>|<DIGITO>)*>
}

SKIP: {
<"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| " "
| "\n"
| "\t"
| "\r"
}

Program Start() :
 { MainClass m1; ClassDeclList c1 = new ClassDeclList(); ClassDecl c; }
 {  m1 = MainClass() 
 	( LOOKAHEAD(3) c = ClassDecl() { c1.addElement(c); }
    | c = Class() { c1.addElement(c); } )*
    <EOF> { return new Program(m1,c1);  }
 }

MainClass MainClass() : 
{ Identifier i1,i2; Statement s1; }
{ <CLASS> i1 = Id() <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN>
  <LPAREN> <STRING> <LBRACKET> <RBRACKET> i2 = Id() <RPAREN>
  <LBRACE> s1 = Statement() <RBRACE> <RBRACE>
  { return new MainClass(i1,i2,s1); }
}

ClassDeclSimple Class() : 
{ VarDeclList v1 = new VarDeclList(); 
  MethodDeclList m1 = new MethodDeclList();
  VarDecl v; MethodDecl m; Identifier i1;}
{ <CLASS> i1 = Id() <LBRACE> 
  ( v = VarDecl() { v1.addElement(v); } 
  | m = MethodDecl() { m1.addElement(m); } )* <RBRACE>
  { return new ClassDeclSimple(i1,v1,m1); } 
}

ClassDecl ClassDecl() : 
{ VarDeclList v1 = new VarDeclList(); 
  MethodDeclList m1 = new MethodDeclList();
  VarDecl v; MethodDecl m; Identifier i1,i2;  }
{ <CLASS> i1 = Id() <EXTENDS> i2 = Id() <LBRACE> 
  ( v = VarDecl() { v1.addElement(v); } 
  | m = MethodDecl() { m1.addElement(m); } )* <RBRACE>
  { return new ClassDeclExtends(i1,i2,v1,m1); } 
}

VarDecl VarDecl() : 
{ Type t1; Identifier i1; }
{ t1 = Type() i1 = Id() <PONTOVIRGULA>
  { return new VarDecl(t1,i1); }
}

Identifier Id() : 
{Token t;}
{ t = <ID> { return new Identifier(t.image); }
}

MethodDecl MethodDecl() : 
{ Type t1; Identifier i1; Exp e1;
  FormalList f1 = new FormalList(); 
  VarDeclList v1 = new VarDeclList() ; VarDecl v;
  StatementList s1 = new StatementList(); Statement s;  }
{ <PUBLIC> t1 = Type() i1 = Id() <LPAREN> f1 = FormalList() <RPAREN> <LBRACE> 
  ( LOOKAHEAD(2) v = VarDecl() { v1.addElement(v); } 
  | s = Statement() { s1.addElement(s); } )* <RETURN>
  e1 = Exp() <PONTOVIRGULA> <RBRACE>
  { return new MethodDecl(t1,i1,f1,v1,s1,e1); }
}

FormalList FormalList() : 
{ FormalList f1 = new FormalList(); 
  Formal f2,f3; Identifier i1,i2; Type t1,t2; }
{ [ t1 = Type() i1 =  Id() 
  { f2 = new Formal(t1,i1); f1.addElement(f2); }  
  ( <VIRGULA> t2 =  Type() i2 = Id() 
  { f3 = new Formal(t2,i2); f1.addElement(f3); } )* ]
  {return f1; }
}

Type Type() : 
{ Token t; }
{ <BOOLEAN> { return new BooleanType(); }
  | t = <ID> { return new IdentifierType(t.image); }
  | LOOKAHEAD(3) <INT_VETOR> { return new IntArrayType(); }
  | <INT>  { return new IntegerType(); }
}

Statement Statement() : 
{ Statement s; StatementList s1 = new StatementList(); }
{ 
  <LBRACE> ( s = Statement() { s1.addElement(s); })*  <RBRACE> {return new Block(s1);}
  | (LOOKAHEAD(2) s = ArrayAssignment() {return s;} 
                  | s = UnaryAssignment() {return s;} ) 
  | s = If() {return s;}
  | s = While() {return s;}
  | s = Print() {return s;}
  
}

Statement UnaryAssignment() : 
{ Identifier i1; Exp e1; }
{ i1 = Id() <RECEBE> e1 = Exp() <PONTOVIRGULA>
  { return new Assign(i1,e1); }
}

Statement ArrayAssignment() : 
{ Exp e1,e2; Identifier i1; }
{ i1=Id() <LBRACKET> e1=Exp() <RBRACKET> <RECEBE> e2=Exp() <PONTOVIRGULA>
  { return new ArrayAssign(i1,e1,e2); }
}

Statement If() : 
{ Exp e1; Statement s1,s2; }
{ <IF> <LPAREN> e1 = Exp() <RPAREN> s1 =  Statement() <ELSE> s2 = Statement() 
  { return new If(e1,s1,s2); }
}

Statement Print() : 
{ Exp e1; }
{ <PRINT_LINE> <LPAREN> e1 = Exp() <RPAREN> <PONTOVIRGULA>
  { return new Print(e1); }
}

Statement While() : 
{ Exp e1; Statement s1; }
{ <WHILE> <LPAREN> e1 = Exp() <RPAREN> s1 = Statement()
  { return new While(e1,s1); }
}

Exp Exp() : 
{ Exp e; }
{ ( LOOKAHEAD( PrimaryExp() <E> ) e = AndExp()
  | LOOKAHEAD( PrimaryExp() <MENOR> ) e = LessThanExp()
  | LOOKAHEAD( PrimaryExp() <MAIS> ) e = PlusExp()
  | LOOKAHEAD( PrimaryExp() <MENOS> ) e = MinusExp()
  | LOOKAHEAD( PrimaryExp() <ESTRELA> ) e = TimesExp()
  | LOOKAHEAD( PrimaryExp() <LBRACKET> ) e = ArrayLookup()
  | LOOKAHEAD( PrimaryExp() <PONTO> <LENGTH> ) e = ArrayLength()
  | LOOKAHEAD( PrimaryExp() <PONTO> Id() <LPAREN> ) e=CallExp()
  | e=PrimaryExp()  )
  { return e; }
}


Exp AndExp() : 
{ Exp e1,e2; }
{ e1 = PrimaryExp() <E> e2 = PrimaryExp() 
  { return new And(e1,e2); }
}

Exp LessThanExp() : 
{ Exp e1,e2; }
{ e1 = PrimaryExp() <MENOR> e2 = PrimaryExp() 
  { return new LessThan(e1,e2); }
}

Exp PlusExp() : 
{ Exp e1,e2; }
{ e1 = PrimaryExp() <MAIS> e2 = PrimaryExp() 
  { return new Plus(e1,e2); }
}

Exp MinusExp() : 
{ Exp e1,e2; }
{ e1 = PrimaryExp() <MENOS> e2 = PrimaryExp()  
  { return new Minus(e1,e2); }
}

Exp TimesExp() : 
{ Exp e1,e2; }
{ e1 = PrimaryExp() <ESTRELA> e2 = PrimaryExp() 
  { return new Times(e1,e2); } 
}

Exp ArrayLookup() :
{ Exp e1,e2; } 
{ e1 = PrimaryExp() <LBRACKET> e2=PrimaryExp() <RBRACKET>
  { return new ArrayLookup(e1,e2); }
}

Exp ArrayLength() :
{ Exp e1; }
{ e1 = PrimaryExp() <PONTO> <LENGTH>
  { return new ArrayLength(e1); }
}

Exp CallExp() :
{ Exp e; Identifier i1; ExpList e1 = new ExpList();  }
{
  e = PrimaryExp() <PONTO> i1 = Id() <LPAREN> e1 = ExpList() <RPAREN>
  { return new Call(e,i1,e1); }
}

ExpList ExpList() : 
{ExpList e1 = new ExpList(); Exp e2,e3;}
{ [ e2 = Exp() { e1.addElement(e2); } 
  (<VIRGULA> e3 = Exp() { e1.addElement(e3); } )* ]
  { return e1; }
}

Exp PrimaryExp() :
{ Token t; Exp e; }
{ ( t=<INTEGER_LITERAL> { return new IntegerLiteral(Integer.parseInt(t.image)); }
  | <TRUE>   { return new True(); }
  | <FALSE>  { return new False(); }
  | t=<ID>   { return new IdentifierExp(t.image); }
  | <THIS>   { return new This(); }
  | LOOKAHEAD(3) e = ArrayAllocationExp()
  | e = AllocationExp()
  | e = NotExp()
  | e = ParenExp() )
  { return e; }
}

Exp ArrayAllocationExp() :
{ Exp e; }
{ <NEW> <INT> <LBRACKET> e=Exp() <RBRACKET>
  { return new NewArray(e); }
}

Exp AllocationExp() :
{ Identifier i1; }
{ <NEW> i1=Id() <LPAREN>  <RPAREN>
  { return new NewObject(i1); }
}

Exp NotExp() :
{ Exp e1; }
{ <NEGADO> e1 = Exp() { return new Not(e1); }
}

Exp ParenExp() :
{ Exp e1; }
{ <LPAREN> e1=Exp() <RPAREN> { return e1; }
}